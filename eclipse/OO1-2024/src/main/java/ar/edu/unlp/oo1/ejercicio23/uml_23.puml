
@startuml
class Usuario{
-nombre:String
-direccion:String
+<<create>> Persona(nombre:String,direccion:String)
+agregarProducto(producto:Producto):boolean
+crearPedido(formaPago:Pago,formaEnvio:Envio,producto:Producto,cant:Integer)
+cantCategoria(categoria:String):Integer
}
Usuario -> Pedido : -pedidos 0..*
Usuario -> Producto : -productos 0..*

abstract Envio{
+costo(): Real
}

interface Pago{
+precio(valor:Real):Real
}

class Pedido {
-cant:Integer
+<<create>>Pedido(formaPago:Pago,formaEnvio:Envio,producto:Producto,cant:Integer)
+costoTotal():Real
+compararCategoria(categoria:String):boolean
}
Pedido -> Pago : -pago
Pedido -> Envio : -envio
Pedido -> Producto : -producto

class Producto {
- nombre:String
- categoria:String
- precio:Real
- cant:Integer
+ hayStock(cant:Integer): boolean
+ stockSuficiente(cant:Integer): boolean
+ mismaCategoria(otraCategoria:String):boolean
}
class alContado implements Pago{
+precio(valor:Real):Real
}
class cuotas6 implements Pago{
+precio(valor:Real):Real
}
class retirarComercio extends Envio{
+costo(): Real
}
class retirarSucursal extends Envio{
+costo(): Real
}
class expressDomicilio extends Envio{
- direccionVendedor: String
- direccionComprador: String
+<<create>> expressDomicilio( direccionVendedor: String, direccionComprador: String)
+costo(): Real
}
@enduml


